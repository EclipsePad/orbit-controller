/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export interface InstantiateMsg {
  astro: string;
  astroport_assembly: string;
  astroport_emission_controller: string;
  astroport_router: string;
  astroport_staking: string;
  astroport_tribute_market?: string | null;
  astroport_voting_escrow: string;
  controller?: string | null;
  eclip: string;
  eclip_astro: string;
  eclipse_dao: string;
  eclipse_minter: string;
  eclipse_single_sided_vault?: string | null;
  eclipse_splitter?: string | null;
  eclipse_staking: string;
  eclipse_tribute_market?: string | null;
  epoch_length: number;
  genesis_epoch_start_date: number;
  is_eclip_rewards_required: boolean;
  vote_delay: number;
  worker_list?: string[] | null;
  xastro: string;
}
export type ExecuteMsg = {
  push_by_admin: {};
} | {
  pause: {};
} | {
  unpause: {};
} | {
  accept_admin_role: {};
} | {
  update_address_config: {
    admin?: string | null;
    astroport_assembly?: string | null;
    astroport_emission_controller?: string | null;
    astroport_router?: string | null;
    astroport_staking?: string | null;
    astroport_tribute_market?: string | null;
    astroport_voting_escrow?: string | null;
    controller?: string | null;
    eclipse_dao?: string | null;
    eclipse_minter?: string | null;
    eclipse_single_sided_vault?: string | null;
    eclipse_splitter?: string | null;
    eclipse_staking?: string | null;
    eclipse_tribute_market?: string | null;
    worker_list?: string[] | null;
  };
} | {
  update_token_config: {
    astro?: string | null;
    eclip?: string | null;
    eclip_astro?: string | null;
    is_eclip_rewards_required?: boolean | null;
    xastro?: string | null;
  };
} | {
  update_date_config: {
    epoch_length?: number | null;
    genesis_epoch_start_date?: number | null;
    vote_delay?: number | null;
  };
} | {
  update_essence_allocation: {
    address_list: string[];
  };
} | {
  swap_to_eclip_astro: {};
} | {
  update_astro_staking_reward_config: {
    config: AstroStakingRewardConfig;
  };
} | {
  claim_astro_rewards: {};
} | {
  claim_treasury_rewards: {};
} | {
  set_delegation: {
    weight: Decimal;
  };
} | {
  set_delegation_by_admin: {
    user: string;
    weight: Decimal;
  };
} | {
  place_vote: {
    weight_allocation: WeightAllocationItem[];
  };
} | {
  place_vote_as_dao: {
    weight_allocation: WeightAllocationItem[];
  };
} | {
  claim_rewards: {};
} | {
  update_route_list: {
    route_list: RouteListItem[];
    simulation: boolean;
  };
} | {
  unlock_xastro: {
    amount: Uint128;
    recipient?: string | null;
  };
} | {
  toggle_delegation: {};
};
export type Decimal = string;
export type Uint128 = string;
export interface AstroStakingRewardConfig {
  treasury: number;
  users: number;
}
export interface WeightAllocationItem {
  lp_token: string;
  weight: Decimal;
}
export interface RouteListItem {
  route: RouteItem[];
  symbol: string;
}
export interface RouteItem {
  symbol_in: string;
  symbol_out: string;
}
export type QueryMsg = {
  address_config: {};
} | {
  token_config: {};
} | {
  date_config: {};
} | {
  rewards: {};
} | {
  bribes_allocation: {};
} | {
  estimated_rewards: {
    user?: string | null;
  };
} | {
  optimization_data: {};
} | {
  voting_power: {
    additional_essence?: Uint128 | null;
    address: string;
  };
} | {
  voting_power_list: {
    amount: number;
    block_time?: number | null;
    start_from?: string | null;
  };
} | {
  voter_xastro: {};
} | {
  xastro_price: {};
} | {
  eclip_astro_minted_by_voter: {};
} | {
  user: {
    address: string;
    block_time?: number | null;
  };
} | {
  user_list: {
    amount: number;
    block_time?: number | null;
    start_from?: string | null;
  };
} | {
  dao_info: {
    block_time?: number | null;
  };
} | {
  voter_info: {
    block_time?: number | null;
  };
} | {
  epoch_info: {};
} | {
  route_list: {
    amount: number;
    start_from?: string | null;
    token_in_list?: string[] | null;
  };
} | {
  operation_status: {};
} | {
  astro_staking_rewards: {};
} | {
  astro_staking_treasury_rewards: {};
} | {
  simulate_eclip_amount_out: {
    amount_in: Uint128;
    symbol_in: string;
  };
} | {
  debug_user_types: {
    address: string;
  };
} | {
  debug_splitted_user_essence_info: {
    address: string;
  };
} | {
  debug_calc_splitted_user_essence_info: {
    address: string;
  };
} | {
  debug_user: {
    address: string;
    block_time?: number | null;
    step: number;
  };
} | {
  debug_accumulated_rewards: {
    address: string;
    block_time?: number | null;
    step: number;
  };
};
export interface MigrateMsg {
  version: string;
}
export type Addr = string;
export interface AddressConfig {
  admin: Addr;
  astroport_assembly: Addr;
  astroport_emission_controller: Addr;
  astroport_router: Addr;
  astroport_staking: Addr;
  astroport_tribute_market?: Addr | null;
  astroport_voting_escrow: Addr;
  controller: Addr;
  eclipse_dao: Addr;
  eclipse_minter: Addr;
  eclipse_single_sided_vault?: Addr | null;
  eclipse_splitter?: Addr | null;
  eclipse_staking: Addr;
  eclipse_tribute_market?: Addr | null;
  worker_list: Addr[];
}
export interface AstroStakingRewardResponse {
  treasury: Uint128;
  users: Uint128;
}
export type ArrayOfBribesAllocationItem = BribesAllocationItem[];
export interface BribesAllocationItem {
  lp_token: string;
  rewards: RewardsItem[];
}
export interface RewardsItem {
  amount: Uint128;
  symbol: string;
}
export interface DaoResponse {
  essence_info: EssenceInfo;
  essence_value: Uint128;
  weights: WeightAllocationItem[];
}
export interface EssenceInfo {
  locking_amount: Uint128;
  staking_components: [Uint128, Uint128];
}
export interface DateConfig {
  epoch_length: number;
  genesis_epoch_start_date: number;
  vote_delay: number;
}
export type ArrayOfString = string[];
export type TupleOfEssenceInfoAndEssenceInfo = [EssenceInfo, EssenceInfo];
export type UserType = "elector" | "delegator" | "slacker";
export type ArrayOfUserType = UserType[];
export interface EpochInfo {
  id: number;
  start_date: number;
}
export interface EstimatedRewardsResponse {
  dao: RewardsItem[];
  dao_delegators: RewardsItem[];
  dao_treasury: RewardsItem[];
  electors: RewardsItem[];
  user: [UserType, RewardsItem[]][];
  voter: RewardsItem[];
}
export type RewardsClaimStage = "swapped" | "unclaimed" | "claimed";
export interface OperationStatusResponse {
  is_delegation_enabled: boolean;
  is_paused: boolean;
  rewards_claim_stage: RewardsClaimStage;
}
export interface OptimizationDataResponse {
  bribes: BribesAllocationItem[];
  dao_essence: Uint128;
  dao_weights: WeightAllocationItem[];
  elector_essence: Uint128;
  elector_weights: WeightAllocationItem[];
  slacker_essence: Uint128;
}
export type ArrayOfRewardsItem = RewardsItem[];
export type ArrayOfRouteListItem = RouteListItem[];
export interface TokenConfig {
  astro: string;
  eclip: string;
  eclip_astro: string;
  is_eclip_rewards_required: boolean;
  xastro: string;
}
export type ArrayOfUserResponse = UserResponse[];
export interface UserResponse {
  essence_info: EssenceInfo;
  essence_value: Uint128;
  rewards: RewardsInfo;
  user_type: UserType;
  weights: WeightAllocationItem[];
}
export interface RewardsInfo {
  last_update_epoch: number;
  value: RewardsItem[];
}
export interface UserListResponse {
  block_time: number;
  list: UserListResponseItem[];
}
export interface UserListResponseItem {
  address: Addr;
  user_info: UserResponse[];
}
export interface VoterInfoResponse {
  block_time: number;
  elector_votes: EssenceAllocationItem[];
  slacker_essence_acc: EssenceInfo;
  total_votes: EssenceAllocationItem[];
  vote_results: VoteResults[];
}
export interface EssenceAllocationItem {
  essence_info: EssenceInfo;
  lp_token: string;
}
export interface VoteResults {
  dao_delegators_rewards: RewardsItem[];
  dao_essence: Uint128;
  dao_treasury_rewards: RewardsItem[];
  dao_weights: WeightAllocationItem[];
  elector_essence: Uint128;
  elector_weights: WeightAllocationItem[];
  end_date: number;
  epoch_id: number;
  pool_info_list: PoolInfoItem[];
  slacker_essence: Uint128;
}
export interface PoolInfoItem {
  lp_token: string;
  rewards: RewardsItem[];
  weight: Decimal;
}
export type ArrayOfTupleOfAddrAndUint128 = [Addr, Uint128][];