/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, Decimal, Uint128, AstroStakingRewardConfig, WeightAllocationItem, RouteListItem, RouteItem, QueryMsg, MigrateMsg, Addr, AddressConfig, AstroStakingRewardResponse, ArrayOfBribesAllocationItem, BribesAllocationItem, RewardsItem, DaoResponse, EssenceInfo, DateConfig, ArrayOfString, TupleOfEssenceInfoAndEssenceInfo, UserType, ArrayOfUserType, EpochInfo, EstimatedRewardsResponse, RewardsClaimStage, OperationStatusResponse, OptimizationDataResponse, ArrayOfRewardsItem, ArrayOfRouteListItem, TokenConfig, ArrayOfUserResponse, UserResponse, RewardsInfo, UserListResponse, UserListResponseItem, VoterInfoResponse, EssenceAllocationItem, VoteResults, PoolInfoItem, ArrayOfTupleOfAddrAndUint128 } from "./Voter.types";
export interface VoterMsg {
  contractAddress: string;
  sender: string;
  pushByAdmin: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  pause: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unpause: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptAdminRole: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateAddressConfig: ({
    admin,
    astroportAssembly,
    astroportEmissionController,
    astroportRouter,
    astroportStaking,
    astroportTributeMarket,
    astroportVotingEscrow,
    controller,
    eclipseDao,
    eclipseMinter,
    eclipseSingleSidedVault,
    eclipseSplitter,
    eclipseStaking,
    eclipseTributeMarket,
    workerList
  }: {
    admin?: string;
    astroportAssembly?: string;
    astroportEmissionController?: string;
    astroportRouter?: string;
    astroportStaking?: string;
    astroportTributeMarket?: string;
    astroportVotingEscrow?: string;
    controller?: string;
    eclipseDao?: string;
    eclipseMinter?: string;
    eclipseSingleSidedVault?: string;
    eclipseSplitter?: string;
    eclipseStaking?: string;
    eclipseTributeMarket?: string;
    workerList?: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateTokenConfig: ({
    astro,
    eclip,
    eclipAstro,
    isEclipRewardsRequired,
    xastro
  }: {
    astro?: string;
    eclip?: string;
    eclipAstro?: string;
    isEclipRewardsRequired?: boolean;
    xastro?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateDateConfig: ({
    epochLength,
    genesisEpochStartDate,
    voteDelay
  }: {
    epochLength?: number;
    genesisEpochStartDate?: number;
    voteDelay?: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateEssenceAllocation: ({
    addressList
  }: {
    addressList: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  swapToEclipAstro: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateAstroStakingRewardConfig: ({
    config
  }: {
    config: AstroStakingRewardConfig;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claimAstroRewards: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claimTreasuryRewards: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setDelegation: ({
    weight
  }: {
    weight: Decimal;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setDelegationByAdmin: ({
    user,
    weight
  }: {
    user: string;
    weight: Decimal;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  placeVote: ({
    weightAllocation
  }: {
    weightAllocation: WeightAllocationItem[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  placeVoteAsDao: ({
    weightAllocation
  }: {
    weightAllocation: WeightAllocationItem[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claimRewards: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateRouteList: ({
    routeList,
    simulation
  }: {
    routeList: RouteListItem[];
    simulation: boolean;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unlockXastro: ({
    amount,
    recipient
  }: {
    amount: Uint128;
    recipient?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  toggleDelegation: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class VoterMsgComposer implements VoterMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.pushByAdmin = this.pushByAdmin.bind(this);
    this.pause = this.pause.bind(this);
    this.unpause = this.unpause.bind(this);
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.updateAddressConfig = this.updateAddressConfig.bind(this);
    this.updateTokenConfig = this.updateTokenConfig.bind(this);
    this.updateDateConfig = this.updateDateConfig.bind(this);
    this.updateEssenceAllocation = this.updateEssenceAllocation.bind(this);
    this.swapToEclipAstro = this.swapToEclipAstro.bind(this);
    this.updateAstroStakingRewardConfig = this.updateAstroStakingRewardConfig.bind(this);
    this.claimAstroRewards = this.claimAstroRewards.bind(this);
    this.claimTreasuryRewards = this.claimTreasuryRewards.bind(this);
    this.setDelegation = this.setDelegation.bind(this);
    this.setDelegationByAdmin = this.setDelegationByAdmin.bind(this);
    this.placeVote = this.placeVote.bind(this);
    this.placeVoteAsDao = this.placeVoteAsDao.bind(this);
    this.claimRewards = this.claimRewards.bind(this);
    this.updateRouteList = this.updateRouteList.bind(this);
    this.unlockXastro = this.unlockXastro.bind(this);
    this.toggleDelegation = this.toggleDelegation.bind(this);
  }
  pushByAdmin = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          push_by_admin: {}
        })),
        funds: _funds
      })
    };
  };
  pause = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          pause: {}
        })),
        funds: _funds
      })
    };
  };
  unpause = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unpause: {}
        })),
        funds: _funds
      })
    };
  };
  acceptAdminRole = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_admin_role: {}
        })),
        funds: _funds
      })
    };
  };
  updateAddressConfig = ({
    admin,
    astroportAssembly,
    astroportEmissionController,
    astroportRouter,
    astroportStaking,
    astroportTributeMarket,
    astroportVotingEscrow,
    controller,
    eclipseDao,
    eclipseMinter,
    eclipseSingleSidedVault,
    eclipseSplitter,
    eclipseStaking,
    eclipseTributeMarket,
    workerList
  }: {
    admin?: string;
    astroportAssembly?: string;
    astroportEmissionController?: string;
    astroportRouter?: string;
    astroportStaking?: string;
    astroportTributeMarket?: string;
    astroportVotingEscrow?: string;
    controller?: string;
    eclipseDao?: string;
    eclipseMinter?: string;
    eclipseSingleSidedVault?: string;
    eclipseSplitter?: string;
    eclipseStaking?: string;
    eclipseTributeMarket?: string;
    workerList?: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_address_config: {
            admin,
            astroport_assembly: astroportAssembly,
            astroport_emission_controller: astroportEmissionController,
            astroport_router: astroportRouter,
            astroport_staking: astroportStaking,
            astroport_tribute_market: astroportTributeMarket,
            astroport_voting_escrow: astroportVotingEscrow,
            controller,
            eclipse_dao: eclipseDao,
            eclipse_minter: eclipseMinter,
            eclipse_single_sided_vault: eclipseSingleSidedVault,
            eclipse_splitter: eclipseSplitter,
            eclipse_staking: eclipseStaking,
            eclipse_tribute_market: eclipseTributeMarket,
            worker_list: workerList
          }
        })),
        funds: _funds
      })
    };
  };
  updateTokenConfig = ({
    astro,
    eclip,
    eclipAstro,
    isEclipRewardsRequired,
    xastro
  }: {
    astro?: string;
    eclip?: string;
    eclipAstro?: string;
    isEclipRewardsRequired?: boolean;
    xastro?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_token_config: {
            astro,
            eclip,
            eclip_astro: eclipAstro,
            is_eclip_rewards_required: isEclipRewardsRequired,
            xastro
          }
        })),
        funds: _funds
      })
    };
  };
  updateDateConfig = ({
    epochLength,
    genesisEpochStartDate,
    voteDelay
  }: {
    epochLength?: number;
    genesisEpochStartDate?: number;
    voteDelay?: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_date_config: {
            epoch_length: epochLength,
            genesis_epoch_start_date: genesisEpochStartDate,
            vote_delay: voteDelay
          }
        })),
        funds: _funds
      })
    };
  };
  updateEssenceAllocation = ({
    addressList
  }: {
    addressList: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_essence_allocation: {
            address_list: addressList
          }
        })),
        funds: _funds
      })
    };
  };
  swapToEclipAstro = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          swap_to_eclip_astro: {}
        })),
        funds: _funds
      })
    };
  };
  updateAstroStakingRewardConfig = ({
    config
  }: {
    config: AstroStakingRewardConfig;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_astro_staking_reward_config: {
            config
          }
        })),
        funds: _funds
      })
    };
  };
  claimAstroRewards = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim_astro_rewards: {}
        })),
        funds: _funds
      })
    };
  };
  claimTreasuryRewards = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim_treasury_rewards: {}
        })),
        funds: _funds
      })
    };
  };
  setDelegation = ({
    weight
  }: {
    weight: Decimal;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_delegation: {
            weight
          }
        })),
        funds: _funds
      })
    };
  };
  setDelegationByAdmin = ({
    user,
    weight
  }: {
    user: string;
    weight: Decimal;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_delegation_by_admin: {
            user,
            weight
          }
        })),
        funds: _funds
      })
    };
  };
  placeVote = ({
    weightAllocation
  }: {
    weightAllocation: WeightAllocationItem[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          place_vote: {
            weight_allocation: weightAllocation
          }
        })),
        funds: _funds
      })
    };
  };
  placeVoteAsDao = ({
    weightAllocation
  }: {
    weightAllocation: WeightAllocationItem[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          place_vote_as_dao: {
            weight_allocation: weightAllocation
          }
        })),
        funds: _funds
      })
    };
  };
  claimRewards = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim_rewards: {}
        })),
        funds: _funds
      })
    };
  };
  updateRouteList = ({
    routeList,
    simulation
  }: {
    routeList: RouteListItem[];
    simulation: boolean;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_route_list: {
            route_list: routeList,
            simulation
          }
        })),
        funds: _funds
      })
    };
  };
  unlockXastro = ({
    amount,
    recipient
  }: {
    amount: Uint128;
    recipient?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unlock_xastro: {
            amount,
            recipient
          }
        })),
        funds: _funds
      })
    };
  };
  toggleDelegation = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          toggle_delegation: {}
        })),
        funds: _funds
      })
    };
  };
}