/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Decimal = string;
export type Uint128 = string;
export interface InstantiateMsg {
  ausdc?: string | null;
  controller?: string | null;
  fee_rate?: Decimal | null;
  total_usdc_limit?: Uint128 | null;
  usdc?: string | null;
}
export type ExecuteMsg = {
  receive: Cw20ReceiveMsg;
} | {
  deposit_usdc: {};
} | {
  withdraw_ausdc: {
    ausdc_amount?: Uint128 | null;
  };
} | {
  deposit_ausdc: {};
} | {
  withdraw_usdc: {
    ausdc_amount?: Uint128 | null;
  };
} | {
  enable_dca: {
    fraction: Decimal;
    swaps?: number | null;
    weights: WeightItem[];
  };
} | {
  disable_dca: {};
} | {
  claim_assets: {};
} | {
  claim_and_swap: {
    assets: AssetItem[];
    fee_amount: Uint128;
    prices: [string, Decimal][];
    rewards: Uint128;
    usdc_yield: Uint128;
  };
} | {
  register_asset: {
    asset: CurrencyForTokenUnverified;
    price: Decimal;
  };
} | {
  accept_admin_role: {};
} | {
  update_config: {
    admin?: string | null;
    ausdc?: string | null;
    controller?: string | null;
    fee_rate?: Decimal | null;
    total_usdc_limit?: Uint128 | null;
    usdc?: string | null;
  };
} | {
  pause: {};
} | {
  unpause: {};
} | {
  set_yield_rate: {
    value: Decimal;
  };
};
export type Binary = string;
export type TokenUnverified = {
  native: {
    denom: string;
  };
} | {
  cw20: {
    address: string;
  };
};
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
}
export interface WeightItem {
  symbol: string;
  weight: Decimal;
}
export interface AssetItem {
  amount: Uint128;
  symbol: string;
}
export interface CurrencyForTokenUnverified {
  decimals: number;
  token: TokenUnverified;
}
export type QueryMsg = {
  config: {};
} | {
  pause_state: {};
} | {
  distribution_state: {
    address?: string | null;
  };
} | {
  asset: {
    symbol: string;
  };
} | {
  asset_list: {
    amount: number;
    start_from?: string | null;
  };
} | {
  ausdc_price: {};
} | {
  app_info: {};
} | {
  user_info: {
    address: string;
    ausdc_price_next?: Decimal | null;
  };
} | {
  user_info_list: {
    amount: number;
    ausdc_price_next?: Decimal | null;
    start_from?: string | null;
  };
} | {
  balances: {
    address: string;
  };
} | {
  block_time: {};
} | {
  yield_rate: {
    distribution_period: number;
  };
} | {
  rewards: {};
};
export interface MigrateMsg {
  version: string;
}
export interface AppInfoResponse {
  ausdc: AusdcInfo;
  deposited_usdc: Uint128;
  usdc_gross: Uint128;
  usdc_net: Uint128;
  yield_accumulated: YieldInfo;
}
export interface AusdcInfo {
  balance: Uint128;
  minted: Uint128;
  unclaimed: Uint128;
}
export interface YieldInfo {
  assets: AssetItem[];
  total: Uint128;
  usdc: Uint128;
}
export type Token = {
  native: {
    denom: string;
  };
} | {
  cw20: {
    address: Addr;
  };
};
export type Addr = string;
export interface CurrencyForToken {
  decimals: number;
  token: Token;
}
export type ArrayOfCurrencyForToken = CurrencyForToken[];
export interface BalancesResponse {
  ausdc: Uint128;
  usdc: Uint128;
}
export type Uint64 = number;
export interface Config {
  admin: Addr;
  ausdc: string;
  controller: Addr;
  fee_rate: Decimal;
  total_usdc_limit: Uint128;
  usdc: string;
}
export interface DistributionState {
  ausdc_price: Decimal;
  counter: number;
  update_date: number;
}
export type Boolean = boolean;
export interface UserInfoResponse {
  address: Addr;
  ausdc: AusdcInfo;
  dca: DcaResponse;
  deposited_usdc: Uint128;
  fee_next: Uint128;
  usdc: Uint128;
  user_yield: UserYield;
}
export interface DcaResponse {
  fraction: Decimal;
  initial_swaps: number;
  remaining_swaps: number;
  weights: WeightItem[];
}
export interface UserYield {
  accumulated_plus_pending: YieldInfo;
  last: YieldInfo;
  next: YieldInfo;
  pending: YieldInfo;
}
export type ArrayOfUserInfoResponse = UserInfoResponse[];