/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Decimal = string;
export type Addr = string;
export type Uint128 = string;
export interface InstantiateMsg {
  beclip_address?: string | null;
  beclip_minter?: string | null;
  beclip_whitelist?: string[] | null;
  dao_treasury_address?: string | null;
  eclip_per_second?: number | null;
  eclip_per_second_multiplier?: Decimal | null;
  equinox_voter?: string | null;
  lock_schedule?: [number, number][] | null;
  pagintaion_config?: PaginationConfig | null;
  penalty_multiplier?: Decimal | null;
  seconds_per_essence?: Uint128 | null;
  staking_token?: string | null;
}
export interface PaginationConfig {
  locking_pagination_index?: Addr | null;
  pagination_amount: number;
  staking_pagination_index?: Addr | null;
}
export type ExecuteMsg = {
  receive: Cw20ReceiveMsg;
} | {
  stake: {};
} | {
  unstake: {};
} | {
  lock: {
    amount: Uint128;
    lock_tier: number;
  };
} | {
  unlock: {};
} | {
  relock: {
    from_tier: number;
    to_tier: number;
    vault_creation_date: number;
  };
} | {
  withdraw: {
    vault_creation_date: number;
  };
} | {
  bond: {
    vault_creation_date_list: number[];
  };
} | {
  bond_for: {
    address_and_amount_list: [string, Uint128][];
  };
} | {
  unbond: {};
} | {
  rebond: {
    amount: Uint128;
    from: string;
    to: string;
  };
} | {
  claim: {};
} | {
  aggregate_vaults: {
    tier?: number | null;
    vault_creation_date_list: number[];
  };
} | {
  accept_admin_role: {};
} | {
  update_config: {
    admin?: string | null;
    beclip_address?: string | null;
    beclip_minter?: string | null;
    beclip_whitelist?: string[] | null;
    dao_treasury_address?: string | null;
    eclip_per_second_multiplier?: Decimal | null;
    equinox_voter?: string | null;
    lock_schedule?: [number, number][] | null;
    penalty_multiplier?: Decimal | null;
  };
} | {
  update_pagination_config: {
    pagination_amount?: number | null;
  };
} | {
  replenish_balance: {};
} | {
  decrease_balance: {
    amount: Uint128;
  };
} | {
  pause: {};
} | {
  unpause: {};
} | {
  fix_bonded_vault: {
    bonded_vault_creation_date?: number | null;
    tier_4_vault_creation_date?: number | null;
    user: string;
  };
};
export type Binary = string;
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
}
export type QueryMsg = {
  query_config: {};
} | {
  query_pagination_config: {};
} | {
  query_state: {};
} | {
  query_staker_info: {
    staker: string;
  };
} | {
  query_users_amount: {};
} | {
  query_aggregated_vault: {
    tier?: number | null;
    user: string;
    vault_creation_date_list: number[];
  };
} | {
  query_balances: {};
} | {
  query_gov_essence_reduced: {
    address_list: string[];
  };
} | {
  query_essence: {
    user: string;
  };
} | {
  query_total_essence: {};
} | {
  query_wallets_per_tier: {};
} | {
  query_staking_essence_list: {
    amount: number;
    block_time: number;
    start_from?: string | null;
  };
} | {
  query_locking_essence_list: {
    amount: number;
    start_from?: string | null;
  };
} | {
  query_apr_info: {
    amount_to_add?: Uint128 | null;
    staker_address?: string | null;
  };
} | {
  query_staker_info_list: {
    amount: number;
    start_from?: string | null;
  };
} | {
  query_locker_info_list: {
    amount: number;
    start_from?: string | null;
  };
} | {
  query_time_until_decreasing_rewards: {};
} | {
  query_rewards_reduction_info: {};
} | {
  query_pause_state: {};
} | {
  query_bonded_vault_creation_date: {
    user: string;
  };
} | {
  query_bonded_vault_creation_date_list: {
    amount: number;
    start_from?: string | null;
  };
} | {
  query_beclip_supply: {};
};
export interface MigrateMsg {
  version: string;
}
export interface Vault {
  accumulated_rewards: Uint128;
  amount: Uint128;
  claim_date: number;
  creation_date: number;
}
export interface QueryAprInfoResponse {
  current: AprInfoItem;
  expected: AprInfoItem;
}
export interface AprInfoItem {
  locking_apr_list: LockingAprItem[];
  staking_apr: Decimal;
}
export interface LockingAprItem {
  apr: Decimal;
  tier: number;
}
export interface QueryBalancesResponse {
  replenished: Uint128;
}
export type Uint64 = number;
export type ArrayOfTupleOfAddrAndNullableUint64 = [Addr, number | null][];
export interface Config {
  admin: Addr;
  beclip_address?: Addr | null;
  beclip_minter?: Addr | null;
  beclip_whitelist: Addr[];
  dao_treasury_address: Addr;
  eclip_per_second: number;
  eclip_per_second_multiplier: Decimal;
  equinox_voter?: Addr | null;
  lock_schedule: [number, number][];
  penalty_multiplier: Decimal;
  seconds_per_essence: Uint128;
  staking_token: string;
}
export interface QueryEssenceResponse {
  essence: Uint128;
  locking_essence: Uint128;
  staking_essence: Uint128;
  staking_essence_components: [Uint128, Uint128];
}
export type ArrayOfTupleOfAddrAndEssenceInfo = [Addr, EssenceInfo][];
export interface EssenceInfo {
  locking_amount: Uint128;
  staking_components: [Uint128, Uint128];
}
export type ArrayOfTupleOfAddrAndArrayOfLockerInfo = [Addr, LockerInfo[]][];
export interface LockerInfo {
  lock_tier: number;
  vaults: Vault[];
}
export type ArrayOfQueryEssenceListResponseItem = QueryEssenceListResponseItem[];
export interface QueryEssenceListResponseItem {
  essence: Uint128;
  user: Addr;
}
export type Boolean = boolean;
export interface QueryRewardsReductionInfoResponse {
  decreasing_rewards_date: number;
  eclip_per_second: number;
}
export interface StakerInfoResponse {
  block_time: number;
  essence_and_rewards_info: EssenceAndRewardsInfo;
  funds_to_unlock: Uint128;
  funds_to_unstake: Uint128;
  locker_infos: LockerInfo[];
  locking_vaults_info: [number, EssenceAndRewardsInfo[]][];
  staker: Addr;
  staker_info: StakerInfo;
  staking_vaults_info: EssenceAndRewardsInfo[];
}
export interface EssenceAndRewardsInfo {
  essence: Uint128;
  locking_essence: Uint128;
  locking_rewards: Uint128;
  penalty: Uint128;
  rewards: Uint128;
  staking_essence: Uint128;
  staking_rewards: Uint128;
}
export interface StakerInfo {
  vaults: Vault[];
}
export type ArrayOfTupleOfAddrAndStakerInfo = [Addr, StakerInfo][];
export interface StateResponse {
  lock_states: State[];
  stake_state: State;
}
export interface State {
  distributed_rewards_per_tier: number;
  total_bond_amount: Uint128;
}
export interface UsersAmountResponse {
  lockers_only: Uint128;
  stakers_and_lockers: Uint128;
  stakers_only: Uint128;
  total: Uint128;
}
export type ArrayOfUint128 = Uint128[];